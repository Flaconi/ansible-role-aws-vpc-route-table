---

# Gather subnets by filter
#
# * aws_vpc_route_tables loop variable: 'rt'
# * aws_vpc_route_tables.subnets loop variable: 'subnet'
#
# Returns:
# * aws_vpc_rt_subnet_by_filter

- name: combine subnet filter
  set_fact:
    _aws_vpc_route_table_subnet_filter: |
      {{
        aws_vpc_route_table_subnet_filter_additional + subnet.filter
      }}

- name: gather subnets by filter
  ec2_vpc_subnet_facts:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_route_table_profile | default(omit) }}"
    region: "{{ rt.region | default(aws_vpc_route_table_default_region) }}"
    filters: "{{ _aws_vpc_route_table_subnet_filter | get_attr('key', 'val') }}"
  register: _aws_vpc_rt_subnets_filter

- name: fail if not exactly one subnet was found by filter
  assert:
    that:
      - _aws_vpc_rt_subnets_filter.subnets is defined
      - _aws_vpc_rt_subnets_filter.subnets | length == 1
    msg: Not exactly one NAT gateway has been found

- name: set subnet array
  set_fact:
    aws_vpc_rt_subnet_by_filter: "{{ aws_vpc_rt_subnet_by_filter + [_aws_vpc_rt_subnets_filter.subnets[0].id] }}"
