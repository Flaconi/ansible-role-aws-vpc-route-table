---

# Gather Peering by filter:
#
# * aws_vpc_route_tables loop variable: 'rt'
# * aws_vpc_route_tables.routes loop variable: 'peering'
#
# Returns:
# * aws_vpc_rt_peering_by_filter

- name: combine peering filter
  set_fact:
    _aws_vpc_route_table_peering_filter: |
      {{
        aws_vpc_route_table_peering_filter_additional + peering.filter
      }}

- name: gather peering by filter
  ec2_vpc_peering_facts:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_route_table_profile | default(omit) }}"
    region: "{{ rt.region | default(aws_vpc_route_table_default_region) }}"
    filters: "{{ _aws_vpc_route_table_peering_filter | get_attr('key', 'val') }}"
  register: _aws_vpc_rt_routes_peering

- name: fail if not exactly one peering was found by filter
  assert:
    that:
      - _aws_vpc_rt_routes_peering.result is defined
      - _aws_vpc_rt_routes_peering.result | length == 1
    msg: Not exactly one peering has been found

- name: set peering array
  set_fact:
    aws_vpc_rt_peering_by_filter: |
      {{
        aws_vpc_rt_peering_by_filter + [{
          'dest': peering.dest,
          'vpc_peering_connection_id': _aws_vpc_rt_routes_peering.result[0].vpc_peering_connection_id
        }]
      }}
