---

# Gather eni by filter:
#
# * aws_vpc_route_tables loop variable: 'rt'
# * aws_vpc_route_tables.routes loop variable: 'eni'
#
# Returns:
# * aws_vpc_rt_eni_by_filter

- name: combine eni filter
  set_fact:
    _aws_vpc_route_table_eni_filter: |
      {{
        aws_vpc_route_table_eni_filter_additional + eni.filter
      }}

- name: gather eni by filter
  ec2_eni_facts:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_route_table_profile | default(omit) }}"
    region: "{{ rt.region | default(aws_vpc_route_table_default_region) }}"
    filters: "{{ _aws_vpc_route_table_eni_filter | get_attr('key', 'val') }}"
  register: _aws_vpc_rt_routes_eni
  check_mode: False

- name: fail if not exactly one eni was found by filter
  assert:
    that:
      - _aws_vpc_rt_routes_eni.network_interfaces is defined
      - _aws_vpc_rt_routes_eni.network_interfaces | length == 1
    msg: Not exactly one eni has been found

- name: set eni array
  set_fact:
    aws_vpc_rt_eni_by_filter: |
      {{
        aws_vpc_rt_eni_by_filter + [{
          'dest': interface.dest,
          'network_interface_id': _aws_vpc_rt_routes_eni.network_interfaces[0].network_interface_id
        }]
      }}
